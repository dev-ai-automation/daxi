"""
Procesadores y validadores para el webhook.
Este m√≥dulo contiene las funciones para procesar y validar los mensajes recibidos por el webhook.
"""
#Necesito que hagas "x" en donde le diga mi estructura de carpetas, la responsabilidade mis capas y
#volver m√°s eficiente el codigo üßô‚Äç‚ôÇÔ∏è

import hmac
import hashlib
import json
import logging
import asyncio
from typing import Dict, Any, Callable, Optional

from app.agents.tourism_agent import tourism_agent

# Configurar logging
logger = logging.getLogger("webhook")

def validate_signature(payload: bytes, signature: str, secret: str) -> bool:
    """
    Valida la firma HMAC de un payload.
    
    Esta funci√≥n implementa el m√©todo est√°ndar de autenticaci√≥n de webhook basado en HMAC.
    El emisor del webhook firma el payload con una clave compartida, y el receptor
    puede verificar la firma para asegurar que el mensaje es aut√©ntico.
    
    Args:
        payload: Payload del webhook en bytes
        signature: Firma proporcionada en el header
        secret: Clave secreta compartida
        
    Returns:
        True si la firma es v√°lida, False en caso contrario
    """
    # Verificar que tenemos los datos necesarios
    if not payload or not signature or not secret:
        logger.warning("Faltan datos para validar la firma")
        return False
    
    # Calcular firma esperada
    try:
        # Convertir secret a bytes si es string
        if isinstance(secret, str):
            secret = secret.encode()
            
        # Calcular hash HMAC utilizando SHA-256
        calculated_hmac = hmac.new(
            secret,
            payload,
            hashlib.sha256
        ).hexdigest()
        
        # Comparar firmas (comparaci√≥n de tiempo constante)
        return hmac.compare_digest(calculated_hmac, signature)
    except Exception as e:
        logger.error(f"Error al validar firma: {str(e)}")
        return False

def generate_signature(payload: Dict[str, Any], secret: str) -> str:
    """
    Genera una firma HMAC para un payload.
    
    Esta funci√≥n es √∫til para sistemas que necesitan enviar webhooks
    firmados hacia otros servicios.
    
    Args:
        payload: Diccionario con datos a firmar
        secret: Clave secreta compartida
        
    Returns:
        Firma hexadecimal del payload
    """
    # Convertir payload a JSON y luego a bytes
    payload_bytes = json.dumps(payload).encode()
    
    # Convertir secret a bytes si es string
    if isinstance(secret, str):
        secret = secret.encode()
        
    # Calcular y retornar la firma
    return hmac.new(
        secret,
        payload_bytes,
        hashlib.sha256
    ).hexdigest()

async def process_message(message_data: Dict[str, Any]) -> None:
    """
    Procesa un mensaje recibido por el webhook.
    
    Esta funci√≥n se ejecuta de forma as√≠ncrona para evitar bloquear la respuesta
    HTTP. Realiza el procesamiento espec√≠fico seg√∫n el tipo de mensaje.
    
    Args:
        message_data: Datos del mensaje a procesar
    """
    try:
        # Registrar la recepci√≥n del mensaje
        logger.info(f"Procesando mensaje tipo: {message_data.get('type')}")
        
        # Validar campos m√≠nimos
        if "type" not in message_data or "content" not in message_data:
            logger.error("Mensaje incompleto: faltan campos obligatorios")
            return
            
        # Enviar al agente para procesamiento
        response = await tourism_agent.process_webhook_data(message_data)
        
        # Registrar respuesta del agente
        logger.info(f"Agente proces√≥ mensaje: {response[:100]}...")
    except Exception as e:
        logger.error(f"Error procesando mensaje: {str(e)}")

def format_webhook_data(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Formatea datos para ser enviados como webhook.
    
    Esta funci√≥n estandariza el formato de los datos que se enviar√°n
    como webhook a otros sistemas.
    
    Args:
        data: Datos a formatear
        
    Returns:
        Datos formateados seg√∫n el est√°ndar de webhook
    """
    # Estructura base del webhook
    webhook_data = {
        "type": data.get("type", "unknown"),
        "content": data.get("content", ""),
        "timestamp": data.get("timestamp"),
        "metadata": {}
    }
    
    # A√±adir metadatos espec√≠ficos seg√∫n el tipo
    if webhook_data["type"] == "reservation_update":
        webhook_data["metadata"] = {
            "reservation_id": data.get("reservation_id"),
            "status": data.get("status"),
            "update_reason": data.get("reason")
        }
    elif webhook_data["type"] == "promo":
        webhook_data["metadata"] = {
            "promo_id": data.get("promo_id"),
            "valid_until": data.get("valid_until"),
            "discount": data.get("discount")
        }
    
    # A√±adir user_id si est√° disponible
    if "user_id" in data:
        webhook_data["user_id"] = data["user_id"]
        
    return webhook_data

# Registro de validadores especializados por tipo de mensaje
# Esto permite a√±adir validaciones espec√≠ficas para cada tipo de webhook
validators: Dict[str, Callable] = {} 